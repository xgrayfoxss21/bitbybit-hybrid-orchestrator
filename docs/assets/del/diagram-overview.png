# Create an overview diagram PNG for BitNet Hybrid Orchestrator
from PIL import Image, ImageDraw, ImageFont

W, H = 1600, 1000
img = Image.new("RGB", (W, H), "white")
d = ImageDraw.Draw(img)

# Fonts (fallback to default)
try:
    title_font = ImageFont.truetype("DejaVuSans-Bold.ttf", 40)
    h_font = ImageFont.truetype("DejaVuSans-Bold.ttf", 24)
    body_font = ImageFont.truetype("DejaVuSans.ttf", 20)
    small_font = ImageFont.truetype("DejaVuSans.ttf", 16)
except:
    title_font = ImageFont.load_default()
    h_font = ImageFont.load_default()
    body_font = ImageFont.load_default()
    small_font = ImageFont.load_default()

def draw_box(x, y, w, h, title="", subtitle=None, dashed=False, fill=None):
    if dashed:
        # dashed rectangle
        step = 10
        for i in range(x, x+w, step*2):
            d.line([(i, y), (min(i+step, x+w), y)], fill="black", width=2)
            d.line([(i, y+h), (min(i+step, x+w), y+h)], fill="black", width=2)
        for j in range(y, y+h, step*2):
            d.line([(x, j), (x, min(j+step, y+h))], fill="black", width=2)
            d.line([(x+w, j), (x+w, min(j+step, y+h))], fill="black", width=2)
    else:
        d.rectangle([x, y, x+w, y+h], outline="black", width=3, fill=fill)
    if title:
        d.text((x+12, y+10), title, fill="black", font=h_font)
    if subtitle:
        d.text((x+12, y+44), subtitle, fill="black", font=small_font)

def draw_arrow(x1, y1, x2, y2, text=None):
    # simple straight arrow
    d.line([(x1, y1), (x2, y2)], fill="black", width=3)
    # arrow head
    import math
    ang = math.atan2(y2 - y1, x2 - x1)
    L = 12
    a1 = ang + math.radians(165)
    a2 = ang - math.radians(165)
    d.line([(x2, y2), (x2 + L * math.cos(a1), y2 + L * math.sin(a1))], fill="black", width=3)
    d.line([(x2, y2), (x2 + L * math.cos(a2), y2 + L * math.sin(a2))], fill="black", width=3)
    if text:
        tx = (x1 + x2) // 2
        ty = (y1 + y2) // 2 - 22
        d.text((tx, ty), text, fill="black", font=small_font, anchor="mm")

# Title
title = "BitNet Hybrid Orchestrator — Overview"
d.text((W//2, 40), title, fill="black", font=title_font, anchor="mm")
d.text((W//2, 80), "parse → [claim1, claim2] (parallel) → reduce • Guard on input & output", fill="black", font=body_font, anchor="mm")

# Left column: User & UI
draw_box(80, 150, 260, 90, "User", "Human operator / client app")
draw_box(80, 270, 260, 120, "UI Layer", "Gradio • Colab • CLI", fill=None)
draw_arrow(210, 240, 210, 270, "messages")

# Orchestrator core
draw_box(420, 140, 540, 160, "Orchestrator Core", "Registry • Scheduler • Node graph", dashed=False)
# Inner boxes
draw_box(440, 190, 230, 80, "Registry", "maps agent names → callables", dashed=True)
draw_box(690, 190, 250, 80, "Scheduler", "runs DAG w/ deps & retries", dashed=True)

# Guard box on the side
draw_box(990, 140, 420, 160, "Guard (TinyBERT / regex fallback)",
         "input/output moderation • PII redaction • jailbreak checks")

# Connections UI -> Orchestrator
draw_arrow(340, 320, 420, 260, "requests")
draw_arrow(960, 260, 990, 220, "text/events")

# Pipeline nodes
parse = (520, 420, 220, 70)
claim1 = (360, 560, 220, 70)
claim2 = (680, 560, 220, 70)
reduce = (520, 700, 220, 70)

draw_box(*parse, "parse", "agent: bitnet.summarizer")
draw_box(*claim1, "claim1", "agent: bitnet.claimcheck")
draw_box(*claim2, "claim2", "agent: bitnet.claimcheck")
draw_box(*reduce, "reduce", "agent: bitnet.synthesis")

# Arrows between nodes
px, py = parse[0]+parse[2]//2, parse[1]+parse[3]
c1x, c1y = claim1[0]+claim1[2]//2, claim1[1]
c2x, c2y = claim2[0]+claim2[2]//2, claim2[1]
rx, ry = reduce[0]+reduce[2]//2, reduce[1]

draw_arrow(px, py, c1x, c1y, "parsed summary")
draw_arrow(px, py, c2x, c2y, "parsed summary")
draw_arrow(c1x, claim1[1]+claim1[3], rx-80, ry, "verdict")
draw_arrow(c2x, claim2[1]+claim2[3], rx+80, ry, "verdict")

# Orchestrator core to parse (input)
draw_arrow(690, 300, parse[0]+parse[2]//2, parse[1], "payload")
# reduce to UI (output)
draw_arrow(rx, reduce[1]+reduce[3], 210, 390, "final brief")
draw_arrow(210, 390, 210, 390)  # anchor
d.line([(210, 390), (210, 270)], fill="black", width=3)  # connect back to UI
# small arrow head
d.polygon([(210, 270), (204, 280), (216, 280)], outline="black", fill="black")

# Legend / notes
draw_box(1040, 360, 370, 180, "Legend / Notes",
         "• Nodes run with guard_pre/guard_post\n"
         "• Parallel fan-out: claim1, claim2\n"
         "• Backends: BitNet (reasoner), TinyBERT (guard)\n"
         "• Deterministic demos; replace with real models",
         dashed=True)

# Storage/compliance
draw_box(1040, 560, 370, 140, "Compliance (AGPL §13)",
         "Send header: X-AGPL-Source: https://github.com/<repo>/tree/<COMMIT_SHA>\n"
         "Optional: /source route, UI footer commit link",
         dashed=True)

# Footer
d.text((W//2, H-30),
       "© Foxes Den Corp — BitNet Hybrid Orchestrator • Architecture overview (alpha)",
       fill="black", font=small_font, anchor="mm")

out_path = "/mnt/data/diagram-overview.png"
img.save(out_path, "PNG")
out_path
